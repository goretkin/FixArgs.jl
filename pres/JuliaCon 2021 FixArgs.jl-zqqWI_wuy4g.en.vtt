WEBVTT
Kind: captions
Language: en

00:00:00.080 --> 00:00:02.629 align:start position:0%
 
hi<00:00:00.560><c> my</c><00:00:00.719><c> name</c><00:00:00.880><c> is</c><00:00:01.040><c> gustavo</c><00:00:01.520><c> nunes</c><00:00:01.839><c> gretchen</c><00:00:02.480><c> and</c>

00:00:02.629 --> 00:00:02.639 align:start position:0%
hi my name is gustavo nunes gretchen and
 

00:00:02.639 --> 00:00:04.470 align:start position:0%
hi my name is gustavo nunes gretchen and
i<00:00:02.720><c> want</c><00:00:02.879><c> to</c><00:00:02.960><c> talk</c><00:00:03.199><c> to</c><00:00:03.360><c> you</c><00:00:03.439><c> about</c><00:00:03.679><c> this</c><00:00:03.840><c> idea</c>

00:00:04.470 --> 00:00:04.480 align:start position:0%
i want to talk to you about this idea
 

00:00:04.480 --> 00:00:06.789 align:start position:0%
i want to talk to you about this idea
of<00:00:04.640><c> using</c><00:00:04.880><c> a</c><00:00:04.960><c> function</c><00:00:05.440><c> for</c><00:00:05.600><c> its</c><00:00:05.839><c> name</c><00:00:06.399><c> and</c><00:00:06.640><c> not</c>

00:00:06.789 --> 00:00:06.799 align:start position:0%
of using a function for its name and not
 

00:00:06.799 --> 00:00:08.710 align:start position:0%
of using a function for its name and not
to<00:00:07.040><c> call</c><00:00:07.359><c> or</c><00:00:07.520><c> invoke</c><00:00:08.000><c> it</c>

00:00:08.710 --> 00:00:08.720 align:start position:0%
to call or invoke it
 

00:00:08.720 --> 00:00:09.830 align:start position:0%
to call or invoke it
i'm<00:00:08.880><c> going</c><00:00:09.040><c> to</c><00:00:09.120><c> demonstrate</c><00:00:09.599><c> this</c>

00:00:09.830 --> 00:00:09.840 align:start position:0%
i'm going to demonstrate this
 

00:00:09.840 --> 00:00:11.749 align:start position:0%
i'm going to demonstrate this
experimental<00:00:10.400><c> package</c><00:00:10.800><c> called</c><00:00:11.120><c> fix</c><00:00:11.440><c> args</c>

00:00:11.749 --> 00:00:11.759 align:start position:0%
experimental package called fix args
 

00:00:11.759 --> 00:00:13.910 align:start position:0%
experimental package called fix args
that<00:00:12.000><c> shows</c><00:00:12.320><c> some</c><00:00:12.559><c> of</c><00:00:12.639><c> these</c><00:00:12.880><c> patterns</c>

00:00:13.910 --> 00:00:13.920 align:start position:0%
that shows some of these patterns
 

00:00:13.920 --> 00:00:15.589 align:start position:0%
that shows some of these patterns
the<00:00:14.080><c> point</c><00:00:14.320><c> of</c><00:00:14.400><c> the</c><00:00:14.480><c> talk</c><00:00:14.799><c> is</c><00:00:14.960><c> to</c><00:00:15.040><c> focus</c><00:00:15.360><c> on</c><00:00:15.440><c> the</c>

00:00:15.589 --> 00:00:15.599 align:start position:0%
the point of the talk is to focus on the
 

00:00:15.599 --> 00:00:17.430 align:start position:0%
the point of the talk is to focus on the
idea<00:00:16.240><c> rather</c><00:00:16.560><c> than</c><00:00:16.720><c> on</c><00:00:16.880><c> the</c><00:00:17.039><c> specific</c>

00:00:17.430 --> 00:00:17.440 align:start position:0%
idea rather than on the specific
 

00:00:17.440 --> 00:00:19.830 align:start position:0%
idea rather than on the specific
implementation<00:00:18.240><c> in</c><00:00:18.320><c> the</c><00:00:18.480><c> package</c>

00:00:19.830 --> 00:00:19.840 align:start position:0%
implementation in the package
 

00:00:19.840 --> 00:00:21.830 align:start position:0%
implementation in the package
to<00:00:20.000><c> get</c><00:00:20.240><c> started</c><00:00:20.880><c> let's</c><00:00:21.119><c> use</c><00:00:21.279><c> an</c><00:00:21.439><c> example</c>

00:00:21.830 --> 00:00:21.840 align:start position:0%
to get started let's use an example
 

00:00:21.840 --> 00:00:23.750 align:start position:0%
to get started let's use an example
based<00:00:22.080><c> on</c><00:00:22.640><c> v-cat</c><00:00:23.199><c> which</c><00:00:23.439><c> is</c><00:00:23.519><c> how</c><00:00:23.680><c> we</c>

00:00:23.750 --> 00:00:23.760 align:start position:0%
based on v-cat which is how we
 

00:00:23.760 --> 00:00:25.429 align:start position:0%
based on v-cat which is how we
concatenate<00:00:24.400><c> vectors</c>

00:00:25.429 --> 00:00:25.439 align:start position:0%
concatenate vectors
 

00:00:25.439 --> 00:00:27.189 align:start position:0%
concatenate vectors
to<00:00:25.599><c> concatenate</c><00:00:26.080><c> a</c><00:00:26.160><c> vector</c><00:00:26.480><c> of</c><00:00:26.560><c> vectors</c><00:00:27.039><c> we</c>

00:00:27.189 --> 00:00:27.199 align:start position:0%
to concatenate a vector of vectors we
 

00:00:27.199 --> 00:00:28.710 align:start position:0%
to concatenate a vector of vectors we
can<00:00:27.359><c> use</c><00:00:27.519><c> a</c><00:00:27.599><c> higher</c><00:00:27.920><c> order</c><00:00:28.240><c> function</c>

00:00:28.710 --> 00:00:28.720 align:start position:0%
can use a higher order function
 

00:00:28.720 --> 00:00:30.790 align:start position:0%
can use a higher order function
reduce<00:00:29.760><c> and</c><00:00:29.920><c> we</c><00:00:30.000><c> get</c><00:00:30.160><c> the</c><00:00:30.240><c> result</c><00:00:30.560><c> that</c><00:00:30.720><c> we</c>

00:00:30.790 --> 00:00:30.800 align:start position:0%
reduce and we get the result that we
 

00:00:30.800 --> 00:00:32.069 align:start position:0%
reduce and we get the result that we
want

00:00:32.069 --> 00:00:32.079 align:start position:0%
want
 

00:00:32.079 --> 00:00:34.069 align:start position:0%
want
let's<00:00:32.320><c> do</c><00:00:32.480><c> the</c><00:00:32.559><c> same</c><00:00:32.800><c> thing</c><00:00:33.360><c> but</c><00:00:33.520><c> now</c><00:00:33.760><c> use</c><00:00:33.920><c> an</c>

00:00:34.069 --> 00:00:34.079 align:start position:0%
let's do the same thing but now use an
 

00:00:34.079 --> 00:00:35.750 align:start position:0%
let's do the same thing but now use an
anonymous<00:00:34.559><c> function</c><00:00:34.960><c> instead</c><00:00:35.200><c> of</c><00:00:35.280><c> directly</c>

00:00:35.750 --> 00:00:35.760 align:start position:0%
anonymous function instead of directly
 

00:00:35.760 --> 00:00:36.630 align:start position:0%
anonymous function instead of directly
calling<00:00:36.079><c> vcat</c>

00:00:36.630 --> 00:00:36.640 align:start position:0%
calling vcat
 

00:00:36.640 --> 00:00:41.030 align:start position:0%
calling vcat
and<00:00:36.719><c> we</c><00:00:36.880><c> can</c><00:00:36.960><c> time</c><00:00:37.200><c> the</c><00:00:37.360><c> two</c>

00:00:41.030 --> 00:00:41.040 align:start position:0%
 
 

00:00:41.040 --> 00:00:43.030 align:start position:0%
 
in<00:00:41.280><c> summary</c><00:00:41.680><c> the</c><00:00:41.840><c> second</c><00:00:42.079><c> one</c><00:00:42.320><c> is</c><00:00:42.399><c> 500</c><00:00:42.879><c> times</c>

00:00:43.030 --> 00:00:43.040 align:start position:0%
in summary the second one is 500 times
 

00:00:43.040 --> 00:00:45.350 align:start position:0%
in summary the second one is 500 times
slower<00:00:43.920><c> and</c><00:00:44.079><c> that's</c><00:00:44.320><c> because</c>

00:00:45.350 --> 00:00:45.360 align:start position:0%
slower and that's because
 

00:00:45.360 --> 00:00:46.709 align:start position:0%
slower and that's because
totally<00:00:45.680><c> different</c><00:00:46.000><c> code</c><00:00:46.239><c> is</c><00:00:46.320><c> running</c><00:00:46.559><c> in</c>

00:00:46.709 --> 00:00:46.719 align:start position:0%
totally different code is running in
 

00:00:46.719 --> 00:00:48.389 align:start position:0%
totally different code is running in
each<00:00:46.960><c> case</c>

00:00:48.389 --> 00:00:48.399 align:start position:0%
each case
 

00:00:48.399 --> 00:00:50.229 align:start position:0%
each case
if<00:00:48.559><c> we</c><00:00:48.640><c> look</c><00:00:48.879><c> at</c><00:00:48.960><c> the</c><00:00:49.039><c> methods</c><00:00:49.360><c> of</c><00:00:49.440><c> reduce</c><00:00:50.079><c> we</c>

00:00:50.229 --> 00:00:50.239 align:start position:0%
if we look at the methods of reduce we
 

00:00:50.239 --> 00:00:51.830 align:start position:0%
if we look at the methods of reduce we
do<00:00:50.480><c> see</c><00:00:50.640><c> that</c><00:00:50.719><c> there's</c><00:00:50.879><c> a</c><00:00:51.039><c> special</c><00:00:51.360><c> case</c>

00:00:51.830 --> 00:00:51.840 align:start position:0%
do see that there's a special case
 

00:00:51.840 --> 00:00:55.189 align:start position:0%
do see that there's a special case
for<00:00:52.000><c> vcat</c><00:00:54.000><c> there</c><00:00:54.160><c> are</c><00:00:54.239><c> two</c><00:00:54.480><c> key</c><00:00:54.640><c> features</c><00:00:55.039><c> that</c>

00:00:55.189 --> 00:00:55.199 align:start position:0%
for vcat there are two key features that
 

00:00:55.199 --> 00:00:56.069 align:start position:0%
for vcat there are two key features that
get<00:00:55.360><c> this</c><00:00:55.520><c> to</c><00:00:55.680><c> work</c>

00:00:56.069 --> 00:00:56.079 align:start position:0%
get this to work
 

00:00:56.079 --> 00:00:58.150 align:start position:0%
get this to work
one<00:00:56.239><c> is</c><00:00:56.399><c> multiple</c><00:00:56.800><c> dispatch</c><00:00:57.520><c> and</c><00:00:57.680><c> the</c><00:00:57.920><c> other</c>

00:00:58.150 --> 00:00:58.160 align:start position:0%
one is multiple dispatch and the other
 

00:00:58.160 --> 00:00:59.990 align:start position:0%
one is multiple dispatch and the other
is<00:00:58.320><c> that</c><00:00:58.480><c> the</c><00:00:58.640><c> function</c><00:00:59.039><c> is</c><00:00:59.199><c> encoded</c><00:00:59.760><c> in</c><00:00:59.840><c> the</c>

00:00:59.990 --> 00:01:00.000 align:start position:0%
is that the function is encoded in the
 

00:01:00.000 --> 00:01:00.790 align:start position:0%
is that the function is encoded in the
type<00:01:00.160><c> domain</c>

00:01:00.790 --> 00:01:00.800 align:start position:0%
type domain
 

00:01:00.800 --> 00:01:03.590 align:start position:0%
type domain
each<00:01:01.039><c> function</c><00:01:01.520><c> is</c><00:01:01.680><c> its</c><00:01:01.840><c> own</c><00:01:02.000><c> type</c><00:01:03.199><c> without</c>

00:01:03.590 --> 00:01:03.600 align:start position:0%
each function is its own type without
 

00:01:03.600 --> 00:01:05.189 align:start position:0%
each function is its own type without
these<00:01:03.840><c> features</c><00:01:04.320><c> we</c><00:01:04.479><c> would</c><00:01:04.640><c> need</c><00:01:04.799><c> to</c><00:01:04.960><c> name</c>

00:01:05.189 --> 00:01:05.199 align:start position:0%
these features we would need to name
 

00:01:05.199 --> 00:01:07.830 align:start position:0%
these features we would need to name
that<00:01:05.360><c> special</c><00:01:05.760><c> code</c><00:01:06.080><c> reduce</c><00:01:06.560><c> underscore</c><00:01:07.119><c> vcat</c>

00:01:07.830 --> 00:01:07.840 align:start position:0%
that special code reduce underscore vcat
 

00:01:07.840 --> 00:01:10.870 align:start position:0%
that special code reduce underscore vcat
or<00:01:08.080><c> perhaps</c><00:01:08.720><c> flatten</c><00:01:09.600><c> personally</c><00:01:10.479><c> the</c><00:01:10.640><c> first</c>

00:01:10.870 --> 00:01:10.880 align:start position:0%
or perhaps flatten personally the first
 

00:01:10.880 --> 00:01:12.630 align:start position:0%
or perhaps flatten personally the first
spelling<00:01:11.280><c> is</c><00:01:11.439><c> better</c><00:01:11.840><c> because</c><00:01:12.159><c> it</c><00:01:12.240><c> combines</c>

00:01:12.630 --> 00:01:12.640 align:start position:0%
spelling is better because it combines
 

00:01:12.640 --> 00:01:14.390 align:start position:0%
spelling is better because it combines
existing<00:01:13.040><c> and</c><00:01:13.119><c> meaningful</c><00:01:13.600><c> names</c><00:01:14.000><c> instead</c><00:01:14.240><c> of</c>

00:01:14.390 --> 00:01:14.400 align:start position:0%
existing and meaningful names instead of
 

00:01:14.400 --> 00:01:17.510 align:start position:0%
existing and meaningful names instead of
introducing<00:01:14.880><c> an</c><00:01:15.040><c> ad</c><00:01:15.280><c> hoc</c><00:01:15.520><c> name</c>

00:01:17.510 --> 00:01:17.520 align:start position:0%
introducing an ad hoc name
 

00:01:17.520 --> 00:01:19.749 align:start position:0%
introducing an ad hoc name
calling<00:01:17.920><c> reduce</c><00:01:18.320><c> with</c><00:01:18.560><c> vcat</c><00:01:19.119><c> might</c><00:01:19.360><c> not</c><00:01:19.520><c> even</c>

00:01:19.749 --> 00:01:19.759 align:start position:0%
calling reduce with vcat might not even
 

00:01:19.759 --> 00:01:20.870 align:start position:0%
calling reduce with vcat might not even
call<00:01:20.000><c> vcat</c>

00:01:20.870 --> 00:01:20.880 align:start position:0%
call vcat
 

00:01:20.880 --> 00:01:23.830 align:start position:0%
call vcat
vcat<00:01:21.360><c> is</c><00:01:21.439><c> used</c><00:01:21.759><c> as</c><00:01:21.920><c> a</c><00:01:22.000><c> name</c><00:01:23.200><c> this</c><00:01:23.439><c> matters</c><00:01:23.759><c> a</c>

00:01:23.830 --> 00:01:23.840 align:start position:0%
vcat is used as a name this matters a
 

00:01:23.840 --> 00:01:25.670 align:start position:0%
vcat is used as a name this matters a
lot<00:01:24.000><c> in</c><00:01:24.159><c> julia</c><00:01:24.560><c> because</c><00:01:24.880><c> we</c><00:01:25.040><c> work</c><00:01:25.280><c> hard</c><00:01:25.520><c> to</c>

00:01:25.670 --> 00:01:25.680 align:start position:0%
lot in julia because we work hard to
 

00:01:25.680 --> 00:01:25.990 align:start position:0%
lot in julia because we work hard to
find

00:01:25.990 --> 00:01:26.000 align:start position:0%
find
 

00:01:26.000 --> 00:01:27.910 align:start position:0%
find
the<00:01:26.080><c> right</c><00:01:26.320><c> meaning</c><00:01:26.640><c> for</c><00:01:26.799><c> a</c><00:01:26.880><c> given</c><00:01:27.200><c> function</c>

00:01:27.910 --> 00:01:27.920 align:start position:0%
the right meaning for a given function
 

00:01:27.920 --> 00:01:29.990 align:start position:0%
the right meaning for a given function
so<00:01:28.080><c> that</c><00:01:28.240><c> generic</c><00:01:28.640><c> programming</c><00:01:29.040><c> can</c><00:01:29.280><c> work</c>

00:01:29.990 --> 00:01:30.000 align:start position:0%
so that generic programming can work
 

00:01:30.000 --> 00:01:31.670 align:start position:0%
so that generic programming can work
and<00:01:30.159><c> i</c><00:01:30.320><c> think</c><00:01:30.479><c> that</c><00:01:30.640><c> we</c><00:01:30.720><c> should</c><00:01:30.880><c> keep</c><00:01:31.119><c> reusing</c>

00:01:31.670 --> 00:01:31.680 align:start position:0%
and i think that we should keep reusing
 

00:01:31.680 --> 00:01:33.429 align:start position:0%
and i think that we should keep reusing
these<00:01:31.920><c> names</c><00:01:32.479><c> where</c><00:01:32.799><c> possible</c>

00:01:33.429 --> 00:01:33.439 align:start position:0%
these names where possible
 

00:01:33.439 --> 00:01:35.590 align:start position:0%
these names where possible
because<00:01:33.759><c> naming</c><00:01:34.159><c> things</c><00:01:34.400><c> is</c><00:01:34.560><c> hard</c><00:01:35.439><c> the</c>

00:01:35.590 --> 00:01:35.600 align:start position:0%
because naming things is hard the
 

00:01:35.600 --> 00:01:38.069 align:start position:0%
because naming things is hard the
original<00:01:36.079><c> motivation</c><00:01:36.799><c> for</c><00:01:37.119><c> fix</c><00:01:37.439><c> args</c><00:01:37.759><c> was</c><00:01:38.000><c> to</c>

00:01:38.069 --> 00:01:38.079 align:start position:0%
original motivation for fix args was to
 

00:01:38.079 --> 00:01:39.109 align:start position:0%
original motivation for fix args was to
generalize<00:01:38.799><c> fix</c>

00:01:39.109 --> 00:01:39.119 align:start position:0%
generalize fix
 

00:01:39.119 --> 00:01:42.069 align:start position:0%
generalize fix
1<00:01:39.280><c> and</c><00:01:39.439><c> fixed</c><00:01:39.759><c> 2</c><00:01:40.000><c> in</c><00:01:40.159><c> base</c><00:01:40.960><c> what</c><00:01:41.200><c> are</c><00:01:41.280><c> those</c>

00:01:42.069 --> 00:01:42.079 align:start position:0%
1 and fixed 2 in base what are those
 

00:01:42.079 --> 00:01:44.550 align:start position:0%
1 and fixed 2 in base what are those
let's<00:01:42.320><c> use</c><00:01:42.560><c> equals</c><00:01:42.960><c> equals</c><00:01:43.280><c> as</c><00:01:43.439><c> an</c><00:01:43.520><c> example</c>

00:01:44.550 --> 00:01:44.560 align:start position:0%
let's use equals equals as an example
 

00:01:44.560 --> 00:01:46.870 align:start position:0%
let's use equals equals as an example
f1<00:01:45.119><c> and</c><00:01:45.280><c> f2</c><00:01:45.920><c> are</c><00:01:46.079><c> basically</c><00:01:46.560><c> the</c><00:01:46.640><c> same</c>

00:01:46.870 --> 00:01:46.880 align:start position:0%
f1 and f2 are basically the same
 

00:01:46.880 --> 00:01:47.670 align:start position:0%
f1 and f2 are basically the same
function

00:01:47.670 --> 00:01:47.680 align:start position:0%
function
 

00:01:47.680 --> 00:01:49.510 align:start position:0%
function
for<00:01:47.840><c> a</c><00:01:47.920><c> given</c><00:01:48.240><c> input</c><00:01:48.560><c> they</c><00:01:48.720><c> compute</c><00:01:49.119><c> the</c><00:01:49.200><c> same</c>

00:01:49.510 --> 00:01:49.520 align:start position:0%
for a given input they compute the same
 

00:01:49.520 --> 00:01:51.270 align:start position:0%
for a given input they compute the same
output<00:01:49.920><c> which</c><00:01:50.159><c> is</c><00:01:50.399><c> whether</c><00:01:50.640><c> the</c><00:01:50.799><c> input</c><00:01:51.119><c> is</c>

00:01:51.270 --> 00:01:51.280 align:start position:0%
output which is whether the input is
 

00:01:51.280 --> 00:01:52.550 align:start position:0%
output which is whether the input is
equal<00:01:51.439><c> to</c><00:01:51.600><c> 50.</c>

00:01:52.550 --> 00:01:52.560 align:start position:0%
equal to 50.
 

00:01:52.560 --> 00:01:54.710 align:start position:0%
equal to 50.
notice<00:01:52.880><c> that</c><00:01:53.040><c> the</c><00:01:53.200><c> type</c><00:01:53.360><c> of</c><00:01:53.520><c> f1</c><00:01:54.000><c> is</c><00:01:54.159><c> this</c><00:01:54.399><c> fixed</c>

00:01:54.710 --> 00:01:54.720 align:start position:0%
notice that the type of f1 is this fixed
 

00:01:54.720 --> 00:01:56.550 align:start position:0%
notice that the type of f1 is this fixed
2<00:01:54.880><c> type</c><00:01:55.439><c> and</c><00:01:55.520><c> that</c><00:01:55.680><c> the</c><00:01:55.920><c> equals</c><00:01:56.240><c> equals</c>

00:01:56.550 --> 00:01:56.560 align:start position:0%
2 type and that the equals equals
 

00:01:56.560 --> 00:01:57.190 align:start position:0%
2 type and that the equals equals
function

00:01:57.190 --> 00:01:57.200 align:start position:0%
function
 

00:01:57.200 --> 00:01:59.109 align:start position:0%
function
and<00:01:57.439><c> the</c><00:01:57.520><c> type</c><00:01:57.759><c> of</c><00:01:57.920><c> 50</c><00:01:58.320><c> are</c><00:01:58.399><c> both</c><00:01:58.640><c> part</c><00:01:58.880><c> of</c><00:01:58.960><c> the</c>

00:01:59.109 --> 00:01:59.119 align:start position:0%
and the type of 50 are both part of the
 

00:01:59.119 --> 00:02:00.310 align:start position:0%
and the type of 50 are both part of the
type

00:02:00.310 --> 00:02:00.320 align:start position:0%
type
 

00:02:00.320 --> 00:02:02.389 align:start position:0%
type
f2<00:02:00.799><c> has</c><00:02:00.960><c> this</c><00:02:01.200><c> special</c><00:02:01.520><c> name</c><00:02:01.920><c> which</c><00:02:02.159><c> is</c><00:02:02.240><c> not</c>

00:02:02.389 --> 00:02:02.399 align:start position:0%
f2 has this special name which is not
 

00:02:02.399 --> 00:02:05.670 align:start position:0%
f2 has this special name which is not
something<00:02:02.799><c> i</c><00:02:02.880><c> recommend</c><00:02:03.280><c> dispatching</c><00:02:03.920><c> on</c>

00:02:05.670 --> 00:02:05.680 align:start position:0%
something i recommend dispatching on
 

00:02:05.680 --> 00:02:08.389 align:start position:0%
something i recommend dispatching on
we<00:02:05.840><c> want</c><00:02:06.159><c> f1</c><00:02:06.560><c> and</c><00:02:06.719><c> f2</c><00:02:07.119><c> to</c><00:02:07.280><c> behave</c><00:02:07.600><c> identically</c>

00:02:08.389 --> 00:02:08.399 align:start position:0%
we want f1 and f2 to behave identically
 

00:02:08.399 --> 00:02:09.990 align:start position:0%
we want f1 and f2 to behave identically
and<00:02:08.479><c> they</c><00:02:08.720><c> do</c><00:02:08.879><c> when</c><00:02:09.039><c> we</c><00:02:09.200><c> pass</c><00:02:09.440><c> them</c><00:02:09.599><c> to</c><00:02:09.759><c> find</c>

00:02:09.990 --> 00:02:10.000 align:start position:0%
and they do when we pass them to find
 

00:02:10.000 --> 00:02:11.830 align:start position:0%
and they do when we pass them to find
first

00:02:11.830 --> 00:02:11.840 align:start position:0%
first
 

00:02:11.840 --> 00:02:13.350 align:start position:0%
first
but<00:02:12.000><c> i</c><00:02:12.080><c> can</c><00:02:12.239><c> tell</c><00:02:12.400><c> you</c><00:02:12.560><c> that</c><00:02:12.720><c> the</c><00:02:12.800><c> first</c><00:02:13.040><c> one</c><00:02:13.280><c> is</c>

00:02:13.350 --> 00:02:13.360 align:start position:0%
but i can tell you that the first one is
 

00:02:13.360 --> 00:02:15.350 align:start position:0%
but i can tell you that the first one is
a<00:02:13.440><c> constant</c><00:02:13.840><c> time</c><00:02:14.080><c> operation</c><00:02:14.800><c> and</c><00:02:14.959><c> the</c><00:02:15.040><c> second</c>

00:02:15.350 --> 00:02:15.360 align:start position:0%
a constant time operation and the second
 

00:02:15.360 --> 00:02:17.110 align:start position:0%
a constant time operation and the second
one<00:02:15.599><c> is</c><00:02:15.760><c> linear</c><00:02:16.160><c> in</c><00:02:16.239><c> the</c><00:02:16.400><c> number</c><00:02:16.560><c> of</c><00:02:16.720><c> elements</c>

00:02:17.110 --> 00:02:17.120 align:start position:0%
one is linear in the number of elements
 

00:02:17.120 --> 00:02:18.630 align:start position:0%
one is linear in the number of elements
in<00:02:17.280><c> this</c><00:02:17.440><c> range</c><00:02:17.760><c> here</c>

00:02:18.630 --> 00:02:18.640 align:start position:0%
in this range here
 

00:02:18.640 --> 00:02:20.550 align:start position:0%
in this range here
it's<00:02:18.879><c> the</c><00:02:18.959><c> same</c><00:02:19.280><c> thing</c><00:02:19.440><c> again</c><00:02:20.000><c> there</c><00:02:20.239><c> is</c><00:02:20.400><c> a</c>

00:02:20.550 --> 00:02:20.560 align:start position:0%
it's the same thing again there is a
 

00:02:20.560 --> 00:02:22.229 align:start position:0%
it's the same thing again there is a
fine<00:02:20.800><c> first</c><00:02:21.120><c> method</c><00:02:21.440><c> defined</c><00:02:21.840><c> for</c><00:02:22.000><c> this</c>

00:02:22.229 --> 00:02:22.239 align:start position:0%
fine first method defined for this
 

00:02:22.239 --> 00:02:23.910 align:start position:0%
fine first method defined for this
special<00:02:22.560><c> case</c>

00:02:23.910 --> 00:02:23.920 align:start position:0%
special case
 

00:02:23.920 --> 00:02:26.309 align:start position:0%
special case
and<00:02:24.080><c> it's</c><00:02:24.239><c> what</c><00:02:24.400><c> you</c><00:02:24.480><c> would</c><00:02:24.640><c> expect</c><00:02:25.920><c> this</c><00:02:26.160><c> is</c>

00:02:26.309 --> 00:02:26.319 align:start position:0%
and it's what you would expect this is
 

00:02:26.319 --> 00:02:27.990 align:start position:0%
and it's what you would expect this is
one<00:02:26.480><c> thing</c><00:02:26.720><c> i</c><00:02:26.879><c> love</c><00:02:27.120><c> about</c><00:02:27.360><c> julia</c>

00:02:27.990 --> 00:02:28.000 align:start position:0%
one thing i love about julia
 

00:02:28.000 --> 00:02:29.910 align:start position:0%
one thing i love about julia
you<00:02:28.080><c> can</c><00:02:28.239><c> imagine</c><00:02:28.720><c> a</c><00:02:28.800><c> plotting</c><00:02:29.200><c> library</c><00:02:29.760><c> that</c>

00:02:29.910 --> 00:02:29.920 align:start position:0%
you can imagine a plotting library that
 

00:02:29.920 --> 00:02:31.670 align:start position:0%
you can imagine a plotting library that
supports<00:02:30.400><c> evenly</c><00:02:30.800><c> spaced</c><00:02:31.120><c> ticks</c><00:02:31.519><c> and</c>

00:02:31.670 --> 00:02:31.680 align:start position:0%
supports evenly spaced ticks and
 

00:02:31.680 --> 00:02:33.110 align:start position:0%
supports evenly spaced ticks and
unevenly<00:02:32.160><c> spaced</c><00:02:32.480><c> ticks</c>

00:02:33.110 --> 00:02:33.120 align:start position:0%
unevenly spaced ticks
 

00:02:33.120 --> 00:02:34.470 align:start position:0%
unevenly spaced ticks
you<00:02:33.280><c> can</c><00:02:33.360><c> use</c><00:02:33.599><c> an</c><00:02:33.760><c> object</c><00:02:34.000><c> like</c><00:02:34.160><c> this</c><00:02:34.400><c> to</c>

00:02:34.470 --> 00:02:34.480 align:start position:0%
you can use an object like this to
 

00:02:34.480 --> 00:02:36.150 align:start position:0%
you can use an object like this to
represent<00:02:34.800><c> the</c><00:02:34.959><c> evenly</c><00:02:35.360><c> spaced</c><00:02:35.680><c> ticks</c>

00:02:36.150 --> 00:02:36.160 align:start position:0%
represent the evenly spaced ticks
 

00:02:36.160 --> 00:02:37.589 align:start position:0%
represent the evenly spaced ticks
and<00:02:36.319><c> if</c><00:02:36.400><c> you</c><00:02:36.480><c> have</c><00:02:36.640><c> code</c><00:02:36.879><c> written</c><00:02:37.200><c> in</c><00:02:37.280><c> terms</c><00:02:37.519><c> of</c>

00:02:37.589 --> 00:02:37.599 align:start position:0%
and if you have code written in terms of
 

00:02:37.599 --> 00:02:39.430 align:start position:0%
and if you have code written in terms of
fine<00:02:37.840><c> first</c><00:02:38.160><c> and</c><00:02:38.319><c> functions</c><00:02:38.720><c> like</c><00:02:39.040><c> it</c>

00:02:39.430 --> 00:02:39.440 align:start position:0%
fine first and functions like it
 

00:02:39.440 --> 00:02:41.910 align:start position:0%
fine first and functions like it
you<00:02:39.599><c> can</c><00:02:40.400><c> perform</c><00:02:40.800><c> efficient</c><00:02:41.200><c> operations</c><00:02:41.840><c> on</c>

00:02:41.910 --> 00:02:41.920 align:start position:0%
you can perform efficient operations on
 

00:02:41.920 --> 00:02:43.110 align:start position:0%
you can perform efficient operations on
that<00:02:42.160><c> representation</c>

00:02:43.110 --> 00:02:43.120 align:start position:0%
that representation
 

00:02:43.120 --> 00:02:45.030 align:start position:0%
that representation
while<00:02:43.440><c> still</c><00:02:43.680><c> supporting</c><00:02:44.239><c> the</c><00:02:44.480><c> unevenly</c>

00:02:45.030 --> 00:02:45.040 align:start position:0%
while still supporting the unevenly
 

00:02:45.040 --> 00:02:46.710 align:start position:0%
while still supporting the unevenly
spaced<00:02:45.360><c> ticks</c><00:02:45.840><c> so</c><00:02:46.000><c> you</c><00:02:46.160><c> can</c><00:02:46.239><c> handle</c><00:02:46.560><c> the</c>

00:02:46.710 --> 00:02:46.720 align:start position:0%
spaced ticks so you can handle the
 

00:02:46.720 --> 00:02:47.990 align:start position:0%
spaced ticks so you can handle the
general<00:02:47.120><c> case</c><00:02:47.360><c> without</c><00:02:47.599><c> affecting</c>

00:02:47.990 --> 00:02:48.000 align:start position:0%
general case without affecting
 

00:02:48.000 --> 00:02:50.229 align:start position:0%
general case without affecting
performance<00:02:48.400><c> in</c><00:02:48.480><c> the</c><00:02:48.640><c> special</c><00:02:49.040><c> case</c>

00:02:50.229 --> 00:02:50.239 align:start position:0%
performance in the special case
 

00:02:50.239 --> 00:02:51.990 align:start position:0%
performance in the special case
fix<00:02:50.560><c> args</c><00:02:50.879><c> provides</c><00:02:51.200><c> a</c><00:02:51.280><c> generalization</c><00:02:51.920><c> of</c>

00:02:51.990 --> 00:02:52.000 align:start position:0%
fix args provides a generalization of
 

00:02:52.000 --> 00:02:54.390 align:start position:0%
fix args provides a generalization of
fix<00:02:52.239><c> 1</c><00:02:52.480><c> and</c><00:02:52.560><c> fix</c><00:02:52.879><c> 2</c><00:02:53.120><c> in</c><00:02:53.280><c> a</c><00:02:53.360><c> few</c><00:02:53.519><c> ways</c>

00:02:54.390 --> 00:02:54.400 align:start position:0%
fix 1 and fix 2 in a few ways
 

00:02:54.400 --> 00:02:56.070 align:start position:0%
fix 1 and fix 2 in a few ways
you<00:02:54.560><c> can</c><00:02:54.720><c> use</c><00:02:54.879><c> functions</c><00:02:55.360><c> of</c><00:02:55.519><c> any</c><00:02:55.680><c> positional</c>

00:02:56.070 --> 00:02:56.080 align:start position:0%
you can use functions of any positional
 

00:02:56.080 --> 00:02:57.430 align:start position:0%
you can use functions of any positional
erraty<00:02:56.640><c> and</c><00:02:56.800><c> any</c><00:02:56.959><c> number</c><00:02:57.200><c> of</c>

00:02:57.430 --> 00:02:57.440 align:start position:0%
erraty and any number of
 

00:02:57.440 --> 00:03:00.070 align:start position:0%
erraty and any number of
its<00:02:57.680><c> arguments</c><00:02:58.080><c> can</c><00:02:58.239><c> be</c><00:02:58.400><c> bound</c><00:02:59.519><c> a</c><00:02:59.760><c> function</c>

00:03:00.070 --> 00:03:00.080 align:start position:0%
its arguments can be bound a function
 

00:03:00.080 --> 00:03:01.589 align:start position:0%
its arguments can be bound a function
can<00:03:00.239><c> also</c><00:03:00.400><c> have</c><00:03:00.560><c> its</c><00:03:00.720><c> keyword</c><00:03:01.120><c> arguments</c>

00:03:01.589 --> 00:03:01.599 align:start position:0%
can also have its keyword arguments
 

00:03:01.599 --> 00:03:02.790 align:start position:0%
can also have its keyword arguments
bound

00:03:02.790 --> 00:03:02.800 align:start position:0%
bound
 

00:03:02.800 --> 00:03:04.550 align:start position:0%
bound
and<00:03:02.959><c> you</c><00:03:03.120><c> can</c><00:03:03.280><c> represent</c><00:03:03.680><c> call</c><00:03:04.000><c> expressions</c>

00:03:04.550 --> 00:03:04.560 align:start position:0%
and you can represent call expressions
 

00:03:04.560 --> 00:03:06.949 align:start position:0%
and you can represent call expressions
on<00:03:04.720><c> their</c><00:03:05.040><c> own</c><00:03:05.599><c> not</c><00:03:05.840><c> just</c><00:03:06.080><c> partially</c><00:03:06.640><c> applied</c>

00:03:06.949 --> 00:03:06.959 align:start position:0%
on their own not just partially applied
 

00:03:06.959 --> 00:03:11.270 align:start position:0%
on their own not just partially applied
functions

00:03:11.270 --> 00:03:11.280 align:start position:0%
 
 

00:03:11.280 --> 00:03:13.589 align:start position:0%
 
a<00:03:11.440><c> quick</c><00:03:11.760><c> example</c><00:03:12.239><c> of</c><00:03:12.400><c> where</c><00:03:12.720><c> fixing</c><00:03:13.200><c> keyword</c>

00:03:13.589 --> 00:03:13.599 align:start position:0%
a quick example of where fixing keyword
 

00:03:13.599 --> 00:03:15.270 align:start position:0%
a quick example of where fixing keyword
arguments<00:03:13.920><c> would</c><00:03:14.080><c> already</c><00:03:14.400><c> be</c><00:03:14.560><c> useful</c>

00:03:15.270 --> 00:03:15.280 align:start position:0%
arguments would already be useful
 

00:03:15.280 --> 00:03:17.350 align:start position:0%
arguments would already be useful
is<00:03:15.440><c> in</c><00:03:15.519><c> the</c><00:03:15.760><c> is</c><00:03:15.920><c> approx</c><00:03:16.560><c> partial</c><00:03:16.879><c> function</c><00:03:17.280><c> in</c>

00:03:17.350 --> 00:03:17.360 align:start position:0%
is in the is approx partial function in
 

00:03:17.360 --> 00:03:19.750 align:start position:0%
is in the is approx partial function in
base<00:03:18.080><c> all</c><00:03:18.319><c> other</c><00:03:18.560><c> partial</c><00:03:18.959><c> functions</c>

00:03:19.750 --> 00:03:19.760 align:start position:0%
base all other partial functions
 

00:03:19.760 --> 00:03:21.750 align:start position:0%
base all other partial functions
use<00:03:20.000><c> fixed</c><00:03:20.319><c> two</c><00:03:20.720><c> but</c><00:03:20.879><c> this</c><00:03:21.120><c> one</c><00:03:21.280><c> cannot</c>

00:03:21.750 --> 00:03:21.760 align:start position:0%
use fixed two but this one cannot
 

00:03:21.760 --> 00:03:25.030 align:start position:0%
use fixed two but this one cannot
because<00:03:22.080><c> the</c><00:03:22.239><c> keyword</c><00:03:22.640><c> arguments</c><00:03:23.120><c> matter</c>

00:03:25.030 --> 00:03:25.040 align:start position:0%
because the keyword arguments matter
 

00:03:25.040 --> 00:03:26.710 align:start position:0%
because the keyword arguments matter
so<00:03:25.280><c> do</c><00:03:25.519><c> we</c><00:03:25.680><c> want</c><00:03:25.840><c> to</c><00:03:26.000><c> encode</c><00:03:26.400><c> land</c><00:03:26.560><c> the</c>

00:03:26.710 --> 00:03:26.720 align:start position:0%
so do we want to encode land the
 

00:03:26.720 --> 00:03:28.949 align:start position:0%
so do we want to encode land the
calculus<00:03:27.200><c> and</c><00:03:27.280><c> types</c><00:03:28.000><c> is</c><00:03:28.159><c> it</c><00:03:28.319><c> ever</c><00:03:28.480><c> useful</c><00:03:28.799><c> to</c>

00:03:28.949 --> 00:03:28.959 align:start position:0%
calculus and types is it ever useful to
 

00:03:28.959 --> 00:03:29.270 align:start position:0%
calculus and types is it ever useful to
fix

00:03:29.270 --> 00:03:29.280 align:start position:0%
fix
 

00:03:29.280 --> 00:03:31.030 align:start position:0%
fix
all<00:03:29.360><c> of</c><00:03:29.440><c> the</c><00:03:29.519><c> arguments</c><00:03:29.920><c> of</c><00:03:30.000><c> a</c><00:03:30.080><c> function</c><00:03:30.720><c> to</c><00:03:30.879><c> me</c>

00:03:31.030 --> 00:03:31.040 align:start position:0%
all of the arguments of a function to me
 

00:03:31.040 --> 00:03:33.030 align:start position:0%
all of the arguments of a function to me
the<00:03:31.200><c> answer</c><00:03:31.519><c> is</c><00:03:31.599><c> definitely</c><00:03:32.080><c> yes</c>

00:03:33.030 --> 00:03:33.040 align:start position:0%
the answer is definitely yes
 

00:03:33.040 --> 00:03:34.710 align:start position:0%
the answer is definitely yes
this<00:03:33.280><c> will</c><00:03:33.440><c> be</c><00:03:33.519><c> a</c><00:03:33.760><c> silly</c><00:03:34.080><c> example</c><00:03:34.400><c> but</c><00:03:34.560><c> let's</c>

00:03:34.710 --> 00:03:34.720 align:start position:0%
this will be a silly example but let's
 

00:03:34.720 --> 00:03:36.630 align:start position:0%
this will be a silly example but let's
consider<00:03:35.120><c> the</c><00:03:35.280><c> division</c><00:03:35.760><c> function</c>

00:03:36.630 --> 00:03:36.640 align:start position:0%
consider the division function
 

00:03:36.640 --> 00:03:38.869 align:start position:0%
consider the division function
if<00:03:36.799><c> you</c><00:03:36.959><c> fix</c><00:03:37.200><c> its</c><00:03:37.360><c> two</c><00:03:37.599><c> arguments</c><00:03:38.319><c> that</c><00:03:38.480><c> looks</c>

00:03:38.869 --> 00:03:38.879 align:start position:0%
if you fix its two arguments that looks
 

00:03:38.879 --> 00:03:40.869 align:start position:0%
if you fix its two arguments that looks
a<00:03:38.959><c> lot</c><00:03:39.200><c> like</c><00:03:39.360><c> a</c><00:03:39.440><c> rational</c><00:03:39.840><c> number</c><00:03:40.080><c> to</c><00:03:40.239><c> me</c>

00:03:40.869 --> 00:03:40.879 align:start position:0%
a lot like a rational number to me
 

00:03:40.879 --> 00:03:42.869 align:start position:0%
a lot like a rational number to me
so<00:03:41.040><c> for</c><00:03:41.200><c> example</c><00:03:41.599><c> to</c><00:03:41.760><c> represent</c><00:03:42.159><c> a</c><00:03:42.239><c> half</c><00:03:42.799><c> and</c>

00:03:42.869 --> 00:03:42.879 align:start position:0%
so for example to represent a half and
 

00:03:42.879 --> 00:03:44.789 align:start position:0%
so for example to represent a half and
here's<00:03:43.200><c> where</c><00:03:43.360><c> we</c><00:03:43.440><c> start</c><00:03:43.680><c> using</c><00:03:43.920><c> the</c><00:03:44.000><c> package</c>

00:03:44.789 --> 00:03:44.799 align:start position:0%
here's where we start using the package
 

00:03:44.799 --> 00:03:47.110 align:start position:0%
here's where we start using the package
we<00:03:44.879><c> can</c><00:03:45.040><c> use</c><00:03:45.200><c> this</c><00:03:45.440><c> x</c><00:03:45.599><c> quote</c><00:03:45.840><c> macro</c><00:03:46.560><c> to</c><00:03:46.799><c> create</c>

00:03:47.110 --> 00:03:47.120 align:start position:0%
we can use this x quote macro to create
 

00:03:47.120 --> 00:03:49.350 align:start position:0%
we can use this x quote macro to create
these<00:03:47.440><c> objects</c>

00:03:49.350 --> 00:03:49.360 align:start position:0%
these objects
 

00:03:49.360 --> 00:03:51.030 align:start position:0%
these objects
if<00:03:49.519><c> you</c><00:03:49.680><c> multiply</c><00:03:50.239><c> these</c><00:03:50.480><c> two</c><00:03:50.640><c> objects</c>

00:03:51.030 --> 00:03:51.040 align:start position:0%
if you multiply these two objects
 

00:03:51.040 --> 00:03:53.110 align:start position:0%
if you multiply these two objects
together<00:03:52.080><c> we</c><00:03:52.239><c> don't</c><00:03:52.400><c> know</c><00:03:52.560><c> how</c><00:03:52.720><c> to</c><00:03:52.799><c> do</c><00:03:52.879><c> that</c>

00:03:53.110 --> 00:03:53.120 align:start position:0%
together we don't know how to do that
 

00:03:53.120 --> 00:03:54.550 align:start position:0%
together we don't know how to do that
and<00:03:53.280><c> we</c><00:03:53.360><c> get</c><00:03:53.519><c> a</c><00:03:53.599><c> method</c><00:03:53.920><c> error</c>

00:03:54.550 --> 00:03:54.560 align:start position:0%
and we get a method error
 

00:03:54.560 --> 00:03:56.470 align:start position:0%
and we get a method error
but<00:03:54.799><c> we</c><00:03:54.879><c> can</c><00:03:55.040><c> define</c><00:03:55.360><c> the</c><00:03:55.519><c> method</c><00:03:55.920><c> using</c><00:03:56.239><c> other</c>

00:03:56.470 --> 00:03:56.480 align:start position:0%
but we can define the method using other
 

00:03:56.480 --> 00:03:58.309 align:start position:0%
but we can define the method using other
macros

00:03:58.309 --> 00:03:58.319 align:start position:0%
macros
 

00:03:58.319 --> 00:03:59.750 align:start position:0%
macros
so<00:03:58.560><c> here</c><00:03:58.720><c> we</c><00:03:58.879><c> define</c><00:03:59.200><c> a</c><00:03:59.280><c> method</c><00:03:59.599><c> for</c>

00:03:59.750 --> 00:03:59.760 align:start position:0%
so here we define a method for
 

00:03:59.760 --> 00:04:01.750 align:start position:0%
so here we define a method for
multiplying<00:04:00.400><c> t</c><00:04:00.640><c> divided</c><00:04:00.959><c> by</c><00:04:01.200><c> t</c>

00:04:01.750 --> 00:04:01.760 align:start position:0%
multiplying t divided by t
 

00:04:01.760 --> 00:04:05.830 align:start position:0%
multiplying t divided by t
by<00:04:02.000><c> t</c><00:04:02.239><c> divided</c><00:04:02.560><c> by</c><00:04:02.799><c> t</c><00:04:04.400><c> and</c><00:04:04.640><c> half</c><00:04:04.879><c> times</c><00:04:05.200><c> a</c><00:04:05.280><c> half</c>

00:04:05.830 --> 00:04:05.840 align:start position:0%
by t divided by t and half times a half
 

00:04:05.840 --> 00:04:07.270 align:start position:0%
by t divided by t and half times a half
now<00:04:06.000><c> gives</c><00:04:06.239><c> you</c><00:04:06.319><c> a</c><00:04:06.400><c> representation</c><00:04:07.040><c> for</c><00:04:07.200><c> a</c>

00:04:07.270 --> 00:04:07.280 align:start position:0%
now gives you a representation for a
 

00:04:07.280 --> 00:04:08.949 align:start position:0%
now gives you a representation for a
quarter<00:04:07.840><c> where</c><00:04:08.000><c> you</c><00:04:08.159><c> have</c><00:04:08.319><c> here</c><00:04:08.560><c> the</c><00:04:08.640><c> one</c><00:04:08.879><c> and</c>

00:04:08.949 --> 00:04:08.959 align:start position:0%
quarter where you have here the one and
 

00:04:08.959 --> 00:04:10.710 align:start position:0%
quarter where you have here the one and
the<00:04:09.120><c> four</c>

00:04:10.710 --> 00:04:10.720 align:start position:0%
the four
 

00:04:10.720 --> 00:04:12.789 align:start position:0%
the four
notice<00:04:11.200><c> that</c><00:04:11.519><c> the</c><00:04:11.760><c> dollar</c><00:04:12.000><c> sign</c><00:04:12.319><c> is</c><00:04:12.480><c> used</c><00:04:12.640><c> to</c>

00:04:12.789 --> 00:04:12.799 align:start position:0%
notice that the dollar sign is used to
 

00:04:12.799 --> 00:04:14.949 align:start position:0%
notice that the dollar sign is used to
escape<00:04:13.280><c> the</c><00:04:13.439><c> x</c><00:04:13.680><c> coding</c>

00:04:14.949 --> 00:04:14.959 align:start position:0%
escape the x coding
 

00:04:14.959 --> 00:04:16.789 align:start position:0%
escape the x coding
without<00:04:15.280><c> the</c><00:04:15.439><c> dollar</c><00:04:15.760><c> sign</c><00:04:16.160><c> you</c><00:04:16.320><c> defer</c><00:04:16.720><c> all</c>

00:04:16.789 --> 00:04:16.799 align:start position:0%
without the dollar sign you defer all
 

00:04:16.799 --> 00:04:18.069 align:start position:0%
without the dollar sign you defer all
the<00:04:16.959><c> function</c><00:04:17.280><c> calls</c><00:04:17.680><c> including</c><00:04:18.000><c> the</c>

00:04:18.069 --> 00:04:18.079 align:start position:0%
the function calls including the
 

00:04:18.079 --> 00:04:22.310 align:start position:0%
the function calls including the
multiplications<00:04:19.040><c> not</c><00:04:19.199><c> just</c><00:04:19.440><c> the</c><00:04:19.600><c> division</c>

00:04:22.310 --> 00:04:22.320 align:start position:0%
 
 

00:04:22.320 --> 00:04:23.510 align:start position:0%
 
where<00:04:22.479><c> does</c><00:04:22.720><c> the</c><00:04:22.800><c> connection</c><00:04:23.280><c> between</c>

00:04:23.510 --> 00:04:23.520 align:start position:0%
where does the connection between
 

00:04:23.520 --> 00:04:25.510 align:start position:0%
where does the connection between
rational<00:04:24.000><c> and</c><00:04:24.160><c> division</c><00:04:24.560><c> happen</c><00:04:24.880><c> in</c><00:04:24.960><c> base</c>

00:04:25.510 --> 00:04:25.520 align:start position:0%
rational and division happen in base
 

00:04:25.520 --> 00:04:28.310 align:start position:0%
rational and division happen in base
well<00:04:25.680><c> what</c><00:04:25.840><c> happens</c><00:04:26.240><c> in</c><00:04:26.320><c> this</c><00:04:26.840><c> method</c><00:04:27.840><c> in</c><00:04:28.080><c> fix</c>

00:04:28.310 --> 00:04:28.320 align:start position:0%
well what happens in this method in fix
 

00:04:28.320 --> 00:04:30.230 align:start position:0%
well what happens in this method in fix
args<00:04:28.720><c> you</c><00:04:28.800><c> can</c><00:04:28.960><c> use</c><00:04:29.040><c> the</c><00:04:29.199><c> function</c><00:04:29.600><c> xeval</c><00:04:30.160><c> to</c>

00:04:30.230 --> 00:04:30.240 align:start position:0%
args you can use the function xeval to
 

00:04:30.240 --> 00:04:31.430 align:start position:0%
args you can use the function xeval to
evaluate<00:04:30.720><c> the</c><00:04:30.880><c> form</c>

00:04:31.430 --> 00:04:31.440 align:start position:0%
evaluate the form
 

00:04:31.440 --> 00:04:33.110 align:start position:0%
evaluate the form
the<00:04:31.600><c> type</c><00:04:31.919><c> already</c><00:04:32.320><c> encodes</c><00:04:32.720><c> that</c><00:04:32.880><c> it's</c><00:04:33.040><c> the</c>

00:04:33.110 --> 00:04:33.120 align:start position:0%
the type already encodes that it's the
 

00:04:33.120 --> 00:04:35.189 align:start position:0%
the type already encodes that it's the
division<00:04:33.520><c> of</c><00:04:33.600><c> two</c><00:04:33.840><c> things</c>

00:04:35.189 --> 00:04:35.199 align:start position:0%
division of two things
 

00:04:35.199 --> 00:04:37.430 align:start position:0%
division of two things
i<00:04:35.280><c> want</c><00:04:35.440><c> to</c><00:04:35.520><c> compare</c><00:04:35.840><c> some</c><00:04:36.000><c> low-level</c><00:04:36.479><c> details</c>

00:04:37.430 --> 00:04:37.440 align:start position:0%
i want to compare some low-level details
 

00:04:37.440 --> 00:04:39.189 align:start position:0%
i want to compare some low-level details
first<00:04:37.680><c> of</c><00:04:37.840><c> all</c><00:04:38.080><c> the</c><00:04:38.240><c> size</c><00:04:38.479><c> of</c><00:04:38.560><c> this</c><00:04:38.800><c> object</c><00:04:39.120><c> is</c>

00:04:39.189 --> 00:04:39.199 align:start position:0%
first of all the size of this object is
 

00:04:39.199 --> 00:04:40.629 align:start position:0%
first of all the size of this object is
the<00:04:39.280><c> same</c><00:04:39.520><c> as</c><00:04:39.600><c> the</c><00:04:39.680><c> corresponding</c><00:04:40.240><c> rational</c>

00:04:40.629 --> 00:04:40.639 align:start position:0%
the same as the corresponding rational
 

00:04:40.639 --> 00:04:41.749 align:start position:0%
the same as the corresponding rational
object

00:04:41.749 --> 00:04:41.759 align:start position:0%
object
 

00:04:41.759 --> 00:04:45.110 align:start position:0%
object
even<00:04:42.080><c> the</c><00:04:42.240><c> memory</c><00:04:42.560><c> layout</c><00:04:42.880><c> is</c><00:04:43.040><c> identical</c>

00:04:45.110 --> 00:04:45.120 align:start position:0%
even the memory layout is identical
 

00:04:45.120 --> 00:04:46.550 align:start position:0%
even the memory layout is identical
let's<00:04:45.280><c> look</c><00:04:45.520><c> at</c><00:04:45.600><c> the</c><00:04:45.680><c> code</c><00:04:46.000><c> generated</c><00:04:46.479><c> to</c>

00:04:46.550 --> 00:04:46.560 align:start position:0%
let's look at the code generated to
 

00:04:46.560 --> 00:04:49.030 align:start position:0%
let's look at the code generated to
convert<00:04:46.880><c> this</c><00:04:47.120><c> rational</c><00:04:47.520><c> to</c><00:04:47.680><c> a</c><00:04:47.759><c> float</c>

00:04:49.030 --> 00:04:49.040 align:start position:0%
convert this rational to a float
 

00:04:49.040 --> 00:04:52.629 align:start position:0%
convert this rational to a float
it's<00:04:49.280><c> also</c><00:04:49.600><c> identical</c><00:04:51.680><c> that</c><00:04:52.000><c> said</c><00:04:52.240><c> it</c><00:04:52.400><c> is</c><00:04:52.479><c> not</c>

00:04:52.629 --> 00:04:52.639 align:start position:0%
it's also identical that said it is not
 

00:04:52.639 --> 00:04:54.469 align:start position:0%
it's also identical that said it is not
a<00:04:52.720><c> drop</c><00:04:52.960><c> in</c><00:04:53.120><c> replacement</c><00:04:53.759><c> for</c><00:04:53.919><c> rational</c>

00:04:54.469 --> 00:04:54.479 align:start position:0%
a drop in replacement for rational
 

00:04:54.479 --> 00:04:57.270 align:start position:0%
a drop in replacement for rational
because<00:04:55.280><c> while</c><00:04:55.600><c> rational</c><00:04:56.000><c> subtypes</c><00:04:56.560><c> number</c>

00:04:57.270 --> 00:04:57.280 align:start position:0%
because while rational subtypes number
 

00:04:57.280 --> 00:04:57.830 align:start position:0%
because while rational subtypes number
the<00:04:57.440><c> call</c>

00:04:57.830 --> 00:04:57.840 align:start position:0%
the call
 

00:04:57.840 --> 00:05:01.749 align:start position:0%
the call
object<00:04:58.240><c> and</c><00:04:58.320><c> fix</c><00:04:58.560><c> arcs</c><00:04:58.880><c> cannot</c>

00:05:01.749 --> 00:05:01.759 align:start position:0%
 
 

00:05:01.759 --> 00:05:03.350 align:start position:0%
 
using<00:05:02.080><c> this</c><00:05:02.320><c> instead</c><00:05:02.560><c> of</c><00:05:02.639><c> based</c><00:05:02.880><c> irrational</c>

00:05:03.350 --> 00:05:03.360 align:start position:0%
using this instead of based irrational
 

00:05:03.360 --> 00:05:05.189 align:start position:0%
using this instead of based irrational
seems<00:05:03.759><c> pretty</c><00:05:04.080><c> silly</c><00:05:04.400><c> and</c><00:05:04.479><c> confusing</c><00:05:05.039><c> but</c>

00:05:05.189 --> 00:05:05.199 align:start position:0%
seems pretty silly and confusing but
 

00:05:05.199 --> 00:05:07.029 align:start position:0%
seems pretty silly and confusing but
there<00:05:05.440><c> are</c><00:05:05.600><c> some</c><00:05:05.759><c> possible</c><00:05:06.080><c> benefits</c>

00:05:07.029 --> 00:05:07.039 align:start position:0%
there are some possible benefits
 

00:05:07.039 --> 00:05:08.710 align:start position:0%
there are some possible benefits
some<00:05:07.280><c> users</c><00:05:07.680><c> want</c><00:05:07.840><c> to</c><00:05:08.000><c> have</c><00:05:08.160><c> different</c><00:05:08.479><c> types</c>

00:05:08.710 --> 00:05:08.720 align:start position:0%
some users want to have different types
 

00:05:08.720 --> 00:05:10.550 align:start position:0%
some users want to have different types
for<00:05:08.880><c> the</c><00:05:08.960><c> numerator</c><00:05:09.440><c> in</c><00:05:09.600><c> the</c><00:05:09.680><c> denominator</c><00:05:10.400><c> and</c>

00:05:10.550 --> 00:05:10.560 align:start position:0%
for the numerator in the denominator and
 

00:05:10.560 --> 00:05:12.310 align:start position:0%
for the numerator in the denominator and
i<00:05:10.639><c> think</c><00:05:10.800><c> a</c><00:05:10.880><c> perfect</c><00:05:11.280><c> example</c><00:05:11.600><c> for</c><00:05:11.840><c> this</c>

00:05:12.310 --> 00:05:12.320 align:start position:0%
i think a perfect example for this
 

00:05:12.320 --> 00:05:14.230 align:start position:0%
i think a perfect example for this
is<00:05:12.479><c> something</c><00:05:12.800><c> like</c><00:05:12.960><c> a</c><00:05:13.039><c> fixed</c><00:05:13.360><c> point</c><00:05:13.600><c> number</c>

00:05:14.230 --> 00:05:14.240 align:start position:0%
is something like a fixed point number
 

00:05:14.240 --> 00:05:15.990 align:start position:0%
is something like a fixed point number
where<00:05:14.400><c> the</c><00:05:14.560><c> denominator</c><00:05:15.199><c> is</c><00:05:15.360><c> encoded</c><00:05:15.759><c> in</c><00:05:15.919><c> the</c>

00:05:15.990 --> 00:05:16.000 align:start position:0%
where the denominator is encoded in the
 

00:05:16.000 --> 00:05:17.029 align:start position:0%
where the denominator is encoded in the
type

00:05:17.029 --> 00:05:17.039 align:start position:0%
type
 

00:05:17.039 --> 00:05:18.150 align:start position:0%
type
there<00:05:17.199><c> are</c><00:05:17.280><c> more</c><00:05:17.520><c> examples</c><00:05:18.000><c> in</c><00:05:18.080><c> the</c>

00:05:18.150 --> 00:05:18.160 align:start position:0%
there are more examples in the
 

00:05:18.160 --> 00:05:19.670 align:start position:0%
there are more examples in the
documentation<00:05:18.960><c> but</c><00:05:19.199><c> i'll</c><00:05:19.280><c> give</c><00:05:19.440><c> you</c><00:05:19.600><c> a</c>

00:05:19.670 --> 00:05:19.680 align:start position:0%
documentation but i'll give you a
 

00:05:19.680 --> 00:05:21.510 align:start position:0%
documentation but i'll give you a
glimpse<00:05:20.000><c> that</c><00:05:20.160><c> we</c><00:05:20.320><c> use</c><00:05:20.479><c> this</c><00:05:20.639><c> quadruple</c><00:05:21.120><c> colon</c>

00:05:21.510 --> 00:05:21.520 align:start position:0%
glimpse that we use this quadruple colon
 

00:05:21.520 --> 00:05:23.430 align:start position:0%
glimpse that we use this quadruple colon
s<00:05:21.680><c> to</c><00:05:21.840><c> mark</c><00:05:22.080><c> this</c><00:05:22.320><c> argument</c><00:05:22.639><c> as</c><00:05:22.800><c> static</c>

00:05:23.430 --> 00:05:23.440 align:start position:0%
s to mark this argument as static
 

00:05:23.440 --> 00:05:25.430 align:start position:0%
s to mark this argument as static
and<00:05:23.600><c> then</c><00:05:23.759><c> the</c><00:05:23.840><c> value</c><00:05:24.240><c> here</c><00:05:24.639><c> is</c><00:05:24.880><c> in</c><00:05:25.039><c> the</c><00:05:25.199><c> type</c>

00:05:25.430 --> 00:05:25.440 align:start position:0%
and then the value here is in the type
 

00:05:25.440 --> 00:05:27.189 align:start position:0%
and then the value here is in the type
domain

00:05:27.189 --> 00:05:27.199 align:start position:0%
domain
 

00:05:27.199 --> 00:05:28.629 align:start position:0%
domain
there<00:05:27.440><c> is</c><00:05:27.600><c> a</c><00:05:27.680><c> kind</c><00:05:27.919><c> of</c><00:05:28.000><c> combination</c><00:05:28.560><c> of</c>

00:05:28.629 --> 00:05:28.639 align:start position:0%
there is a kind of combination of
 

00:05:28.639 --> 00:05:30.390 align:start position:0%
there is a kind of combination of
structural<00:05:29.199><c> and</c><00:05:29.280><c> nominal</c><00:05:29.680><c> typing</c><00:05:30.000><c> here</c>

00:05:30.390 --> 00:05:30.400 align:start position:0%
structural and nominal typing here
 

00:05:30.400 --> 00:05:31.990 align:start position:0%
structural and nominal typing here
because<00:05:30.720><c> we</c><00:05:30.880><c> avoid</c><00:05:31.199><c> choosing</c><00:05:31.520><c> names</c><00:05:31.759><c> like</c>

00:05:31.990 --> 00:05:32.000 align:start position:0%
because we avoid choosing names like
 

00:05:32.000 --> 00:05:34.629 align:start position:0%
because we avoid choosing names like
rational<00:05:32.800><c> num</c><00:05:33.199><c> and</c><00:05:33.360><c> then</c>

00:05:34.629 --> 00:05:34.639 align:start position:0%
rational num and then
 

00:05:34.639 --> 00:05:36.230 align:start position:0%
rational num and then
the<00:05:34.800><c> fields</c><00:05:35.120><c> can</c><00:05:35.280><c> be</c><00:05:35.440><c> distinguished</c><00:05:36.000><c> by</c><00:05:36.160><c> the</c>

00:05:36.230 --> 00:05:36.240 align:start position:0%
the fields can be distinguished by the
 

00:05:36.240 --> 00:05:37.510 align:start position:0%
the fields can be distinguished by the
role<00:05:36.479><c> they</c><00:05:36.639><c> play</c><00:05:36.800><c> with</c><00:05:36.960><c> respect</c><00:05:37.280><c> to</c><00:05:37.440><c> the</c>

00:05:37.510 --> 00:05:37.520 align:start position:0%
role they play with respect to the
 

00:05:37.520 --> 00:05:38.390 align:start position:0%
role they play with respect to the
function

00:05:38.390 --> 00:05:38.400 align:start position:0%
function
 

00:05:38.400 --> 00:05:40.150 align:start position:0%
function
only<00:05:38.639><c> the</c><00:05:38.800><c> function</c><00:05:39.199><c> needs</c><00:05:39.440><c> a</c><00:05:39.520><c> name</c><00:05:39.919><c> and</c><00:05:40.080><c> the</c>

00:05:40.150 --> 00:05:40.160 align:start position:0%
only the function needs a name and the
 

00:05:40.160 --> 00:05:42.950 align:start position:0%
only the function needs a name and the
rest<00:05:40.479><c> is</c><00:05:40.560><c> determined</c><00:05:41.039><c> structurally</c>

00:05:42.950 --> 00:05:42.960 align:start position:0%
rest is determined structurally
 

00:05:42.960 --> 00:05:44.790 align:start position:0%
rest is determined structurally
the<00:05:43.120><c> same</c><00:05:43.360><c> point</c><00:05:43.600><c> can</c><00:05:43.759><c> be</c><00:05:43.919><c> made</c><00:05:44.080><c> differently</c>

00:05:44.790 --> 00:05:44.800 align:start position:0%
the same point can be made differently
 

00:05:44.800 --> 00:05:47.189 align:start position:0%
the same point can be made differently
if<00:05:44.960><c> we</c><00:05:45.199><c> x</c><00:05:45.520><c> quote</c><00:05:45.759><c> an</c><00:05:45.919><c> identity</c><00:05:46.400><c> function</c>

00:05:47.189 --> 00:05:47.199 align:start position:0%
if we x quote an identity function
 

00:05:47.199 --> 00:05:49.590 align:start position:0%
if we x quote an identity function
we<00:05:47.360><c> get</c><00:05:47.600><c> this</c><00:05:47.840><c> value</c><00:05:48.160><c> every</c><00:05:48.400><c> time</c><00:05:49.039><c> whereas</c><00:05:49.440><c> if</c>

00:05:49.590 --> 00:05:49.600 align:start position:0%
we get this value every time whereas if
 

00:05:49.600 --> 00:05:51.029 align:start position:0%
we get this value every time whereas if
we<00:05:49.759><c> create</c><00:05:50.000><c> a</c><00:05:50.080><c> lambda</c><00:05:50.400><c> function</c>

00:05:51.029 --> 00:05:51.039 align:start position:0%
we create a lambda function
 

00:05:51.039 --> 00:05:52.710 align:start position:0%
we create a lambda function
we<00:05:51.199><c> get</c><00:05:51.360><c> things</c><00:05:51.600><c> that</c><00:05:51.759><c> do</c><00:05:51.919><c> not</c><00:05:52.080><c> compare</c><00:05:52.479><c> equal</c>

00:05:52.710 --> 00:05:52.720 align:start position:0%
we get things that do not compare equal
 

00:05:52.720 --> 00:05:54.070 align:start position:0%
we get things that do not compare equal
to<00:05:52.880><c> each</c><00:05:53.039><c> other</c><00:05:53.360><c> even</c><00:05:53.600><c> though</c><00:05:53.759><c> they</c><00:05:53.919><c> are</c>

00:05:54.070 --> 00:05:54.080 align:start position:0%
to each other even though they are
 

00:05:54.080 --> 00:05:55.590 align:start position:0%
to each other even though they are
structurally<00:05:54.639><c> identical</c>

00:05:55.590 --> 00:05:55.600 align:start position:0%
structurally identical
 

00:05:55.600 --> 00:05:57.270 align:start position:0%
structurally identical
and<00:05:55.840><c> in</c><00:05:56.000><c> case</c><00:05:56.160><c> you're</c><00:05:56.319><c> wondering</c><00:05:56.720><c> fixed</c><00:05:56.960><c> args</c>

00:05:57.270 --> 00:05:57.280 align:start position:0%
and in case you're wondering fixed args
 

00:05:57.280 --> 00:05:58.950 align:start position:0%
and in case you're wondering fixed args
does<00:05:57.440><c> support</c><00:05:57.840><c> all</c><00:05:57.919><c> sorts</c><00:05:58.240><c> of</c><00:05:58.319><c> nested</c><00:05:58.639><c> lambda</c>

00:05:58.950 --> 00:05:58.960 align:start position:0%
does support all sorts of nested lambda
 

00:05:58.960 --> 00:06:01.350 align:start position:0%
does support all sorts of nested lambda
expressions<00:05:59.440><c> correctly</c><00:05:59.919><c> as</c><00:06:00.080><c> you'd</c><00:06:00.240><c> hope</c>

00:06:01.350 --> 00:06:01.360 align:start position:0%
expressions correctly as you'd hope
 

00:06:01.360 --> 00:06:02.710 align:start position:0%
expressions correctly as you'd hope
there<00:06:01.520><c> are</c><00:06:01.600><c> some</c><00:06:01.759><c> existing</c><00:06:02.160><c> patterns</c><00:06:02.639><c> that</c>

00:06:02.710 --> 00:06:02.720 align:start position:0%
there are some existing patterns that
 

00:06:02.720 --> 00:06:04.390 align:start position:0%
there are some existing patterns that
this<00:06:02.880><c> relates</c><00:06:03.280><c> to</c><00:06:03.520><c> because</c><00:06:03.840><c> any</c><00:06:04.080><c> eager</c>

00:06:04.390 --> 00:06:04.400 align:start position:0%
this relates to because any eager
 

00:06:04.400 --> 00:06:04.870 align:start position:0%
this relates to because any eager
function

00:06:04.870 --> 00:06:04.880 align:start position:0%
function
 

00:06:04.880 --> 00:06:07.029 align:start position:0%
function
can<00:06:05.039><c> have</c><00:06:05.199><c> a</c><00:06:05.280><c> lazy</c><00:06:05.600><c> representation</c><00:06:06.319><c> now</c><00:06:06.800><c> so</c>

00:06:07.029 --> 00:06:07.039 align:start position:0%
can have a lazy representation now so
 

00:06:07.039 --> 00:06:08.150 align:start position:0%
can have a lazy representation now so
base<00:06:07.280><c> that</c><00:06:07.440><c> generator</c>

00:06:08.150 --> 00:06:08.160 align:start position:0%
base that generator
 

00:06:08.160 --> 00:06:10.870 align:start position:0%
base that generator
could<00:06:08.319><c> be</c><00:06:08.479><c> a</c><00:06:08.560><c> lazy</c><00:06:08.880><c> representation</c><00:06:09.520><c> of</c><00:06:09.680><c> map</c>

00:06:10.870 --> 00:06:10.880 align:start position:0%
could be a lazy representation of map
 

00:06:10.880 --> 00:06:12.469 align:start position:0%
could be a lazy representation of map
many<00:06:11.199><c> of</c><00:06:11.280><c> the</c><00:06:11.440><c> types</c><00:06:11.680><c> in</c><00:06:11.840><c> the</c><00:06:12.000><c> iterators</c>

00:06:12.469 --> 00:06:12.479 align:start position:0%
many of the types in the iterators
 

00:06:12.479 --> 00:06:13.350 align:start position:0%
many of the types in the iterators
module

00:06:13.350 --> 00:06:13.360 align:start position:0%
module
 

00:06:13.360 --> 00:06:15.029 align:start position:0%
module
are<00:06:13.520><c> in</c><00:06:13.600><c> one-to-one</c><00:06:14.160><c> correspondence</c><00:06:14.880><c> with</c>

00:06:15.029 --> 00:06:15.039 align:start position:0%
are in one-to-one correspondence with
 

00:06:15.039 --> 00:06:17.029 align:start position:0%
are in one-to-one correspondence with
functions<00:06:15.919><c> and</c><00:06:16.000><c> that</c><00:06:16.240><c> correspondence</c><00:06:16.880><c> can</c><00:06:16.960><c> be</c>

00:06:17.029 --> 00:06:17.039 align:start position:0%
functions and that correspondence can be
 

00:06:17.039 --> 00:06:19.270 align:start position:0%
functions and that correspondence can be
made<00:06:17.280><c> explicit</c><00:06:17.840><c> using</c><00:06:18.080><c> fixed</c><00:06:18.400><c> arts</c>

00:06:19.270 --> 00:06:19.280 align:start position:0%
made explicit using fixed arts
 

00:06:19.280 --> 00:06:21.350 align:start position:0%
made explicit using fixed arts
having<00:06:19.600><c> a</c><00:06:19.759><c> concise</c><00:06:20.160><c> name</c><00:06:20.400><c> is</c><00:06:20.479><c> still</c><00:06:20.720><c> valuable</c>

00:06:21.350 --> 00:06:21.360 align:start position:0%
having a concise name is still valuable
 

00:06:21.360 --> 00:06:23.189 align:start position:0%
having a concise name is still valuable
and<00:06:21.520><c> so</c><00:06:21.680><c> an</c><00:06:21.840><c> alias</c><00:06:22.160><c> can</c><00:06:22.319><c> be</c><00:06:22.479><c> used</c><00:06:22.800><c> to</c><00:06:22.960><c> keep</c>

00:06:23.189 --> 00:06:23.199 align:start position:0%
and so an alias can be used to keep
 

00:06:23.199 --> 00:06:25.189 align:start position:0%
and so an alias can be used to keep
existing<00:06:23.600><c> method</c><00:06:23.919><c> definitions</c><00:06:24.560><c> relatively</c>

00:06:25.189 --> 00:06:25.199 align:start position:0%
existing method definitions relatively
 

00:06:25.199 --> 00:06:28.629 align:start position:0%
existing method definitions relatively
clean

00:06:28.629 --> 00:06:28.639 align:start position:0%
 
 

00:06:28.639 --> 00:06:31.029 align:start position:0%
 
literal<00:06:29.039><c> powers</c><00:06:29.440><c> in</c><00:06:29.600><c> julia</c><00:06:30.000><c> lower</c><00:06:30.240><c> especially</c>

00:06:31.029 --> 00:06:31.039 align:start position:0%
literal powers in julia lower especially
 

00:06:31.039 --> 00:06:31.909 align:start position:0%
literal powers in julia lower especially
for<00:06:31.199><c> good</c><00:06:31.360><c> reason</c>

00:06:31.909 --> 00:06:31.919 align:start position:0%
for good reason
 

00:06:31.919 --> 00:06:33.350 align:start position:0%
for good reason
and<00:06:32.080><c> that</c><00:06:32.240><c> could</c><00:06:32.400><c> be</c><00:06:32.560><c> replaced</c><00:06:32.880><c> by</c><00:06:33.039><c> something</c>

00:06:33.350 --> 00:06:33.360 align:start position:0%
and that could be replaced by something
 

00:06:33.360 --> 00:06:35.510 align:start position:0%
and that could be replaced by something
more<00:06:33.520><c> general</c><00:06:33.919><c> perhaps</c><00:06:34.400><c> like</c><00:06:34.639><c> using</c><00:06:35.039><c> this</c>

00:06:35.510 --> 00:06:35.520 align:start position:0%
more general perhaps like using this
 

00:06:35.520 --> 00:06:37.350 align:start position:0%
more general perhaps like using this
where<00:06:35.840><c> again</c><00:06:36.080><c> the</c><00:06:36.160><c> static</c><00:06:36.560><c> annotation</c><00:06:37.039><c> shows</c>

00:06:37.350 --> 00:06:37.360 align:start position:0%
where again the static annotation shows
 

00:06:37.360 --> 00:06:38.790 align:start position:0%
where again the static annotation shows
up

00:06:38.790 --> 00:06:38.800 align:start position:0%
up
 

00:06:38.800 --> 00:06:40.390 align:start position:0%
up
this<00:06:39.039><c> is</c><00:06:39.120><c> the</c><00:06:39.199><c> same</c><00:06:39.440><c> pattern</c><00:06:39.759><c> as</c><00:06:39.919><c> what</c><00:06:40.080><c> happens</c>

00:06:40.390 --> 00:06:40.400 align:start position:0%
this is the same pattern as what happens
 

00:06:40.400 --> 00:06:41.909 align:start position:0%
this is the same pattern as what happens
with<00:06:40.560><c> broadcasting</c><00:06:41.280><c> in</c><00:06:41.360><c> julia</c>

00:06:41.909 --> 00:06:41.919 align:start position:0%
with broadcasting in julia
 

00:06:41.919 --> 00:06:44.390 align:start position:0%
with broadcasting in julia
where<00:06:42.160><c> instead</c><00:06:42.400><c> of</c><00:06:42.560><c> an</c><00:06:42.960><c> xevalcall</c><00:06:44.080><c> we</c><00:06:44.240><c> have</c>

00:06:44.390 --> 00:06:44.400 align:start position:0%
where instead of an xevalcall we have
 

00:06:44.400 --> 00:06:46.469 align:start position:0%
where instead of an xevalcall we have
materialize

00:06:46.469 --> 00:06:46.479 align:start position:0%
materialize
 

00:06:46.479 --> 00:06:48.469 align:start position:0%
materialize
this<00:06:46.720><c> pattern</c><00:06:47.120><c> shows</c><00:06:47.280><c> up</c><00:06:47.440><c> in</c><00:06:47.520><c> other</c><00:06:47.759><c> packages</c>

00:06:48.469 --> 00:06:48.479 align:start position:0%
this pattern shows up in other packages
 

00:06:48.479 --> 00:06:50.550 align:start position:0%
this pattern shows up in other packages
like<00:06:48.720><c> lazy</c><00:06:49.120><c> arrays</c>

00:06:50.550 --> 00:06:50.560 align:start position:0%
like lazy arrays
 

00:06:50.560 --> 00:06:53.990 align:start position:0%
like lazy arrays
and<00:06:50.720><c> lazy</c><00:06:51.120><c> sets</c>

00:06:53.990 --> 00:06:54.000 align:start position:0%
 
 

00:06:54.000 --> 00:06:55.110 align:start position:0%
 
i<00:06:54.160><c> want</c><00:06:54.240><c> to</c><00:06:54.319><c> be</c><00:06:54.479><c> clear</c><00:06:54.720><c> that</c><00:06:54.800><c> this</c><00:06:54.960><c> is</c>

00:06:55.110 --> 00:06:55.120 align:start position:0%
i want to be clear that this is
 

00:06:55.120 --> 00:06:56.469 align:start position:0%
i want to be clear that this is
different<00:06:55.360><c> from</c><00:06:55.520><c> quoting</c><00:06:55.919><c> expressions</c><00:06:56.400><c> in</c>

00:06:56.469 --> 00:06:56.479 align:start position:0%
different from quoting expressions in
 

00:06:56.479 --> 00:06:57.110 align:start position:0%
different from quoting expressions in
base

00:06:57.110 --> 00:06:57.120 align:start position:0%
base
 

00:06:57.120 --> 00:06:59.270 align:start position:0%
base
because<00:06:57.919><c> there</c><00:06:58.160><c> you</c><00:06:58.400><c> would</c><00:06:58.560><c> get</c><00:06:58.800><c> a</c><00:06:58.880><c> bunch</c><00:06:59.120><c> of</c>

00:06:59.270 --> 00:06:59.280 align:start position:0%
because there you would get a bunch of
 

00:06:59.280 --> 00:07:01.430 align:start position:0%
because there you would get a bunch of
symbols<00:07:00.080><c> and</c><00:07:00.240><c> with</c><00:07:00.400><c> fix</c><00:07:00.639><c> args</c><00:07:00.960><c> you</c><00:07:01.199><c> actually</c>

00:07:01.430 --> 00:07:01.440 align:start position:0%
symbols and with fix args you actually
 

00:07:01.440 --> 00:07:02.550 align:start position:0%
symbols and with fix args you actually
get<00:07:01.599><c> the</c><00:07:01.759><c> evaluation</c><00:07:02.319><c> of</c>

00:07:02.550 --> 00:07:02.560 align:start position:0%
get the evaluation of
 

00:07:02.560 --> 00:07:05.830 align:start position:0%
get the evaluation of
x<00:07:02.800><c> the</c><00:07:02.960><c> division</c><00:07:03.440><c> and</c><00:07:03.520><c> the</c><00:07:03.680><c> y</c><00:07:05.199><c> it's</c><00:07:05.440><c> also</c><00:07:05.680><c> not</c>

00:07:05.830 --> 00:07:05.840 align:start position:0%
x the division and the y it's also not
 

00:07:05.840 --> 00:07:07.270 align:start position:0%
x the division and the y it's also not
the<00:07:05.919><c> same</c><00:07:06.160><c> as</c><00:07:06.240><c> something</c><00:07:06.479><c> like</c><00:07:06.639><c> the</c><00:07:06.800><c> term</c><00:07:07.039><c> type</c>

00:07:07.270 --> 00:07:07.280 align:start position:0%
the same as something like the term type
 

00:07:07.280 --> 00:07:08.629 align:start position:0%
the same as something like the term type
in<00:07:07.360><c> symbolic</c><00:07:07.840><c> utils</c>

00:07:08.629 --> 00:07:08.639 align:start position:0%
in symbolic utils
 

00:07:08.639 --> 00:07:10.629 align:start position:0%
in symbolic utils
where<00:07:08.880><c> the</c><00:07:09.120><c> types</c><00:07:09.599><c> for</c><00:07:09.759><c> the</c><00:07:09.919><c> function</c><00:07:10.400><c> and</c><00:07:10.479><c> the</c>

00:07:10.629 --> 00:07:10.639 align:start position:0%
where the types for the function and the
 

00:07:10.639 --> 00:07:12.550 align:start position:0%
where the types for the function and the
arguments<00:07:11.199><c> are</c><00:07:11.440><c> intentionally</c><00:07:12.000><c> marked</c><00:07:12.319><c> as</c>

00:07:12.550 --> 00:07:12.560 align:start position:0%
arguments are intentionally marked as
 

00:07:12.560 --> 00:07:14.070 align:start position:0%
arguments are intentionally marked as
any<00:07:12.880><c> so</c><00:07:13.039><c> that</c><00:07:13.120><c> the</c><00:07:13.199><c> compiler</c><00:07:13.759><c> does</c><00:07:13.919><c> not</c>

00:07:14.070 --> 00:07:14.080 align:start position:0%
any so that the compiler does not
 

00:07:14.080 --> 00:07:15.589 align:start position:0%
any so that the compiler does not
generate<00:07:14.400><c> a</c><00:07:14.479><c> bunch</c><00:07:14.720><c> of</c><00:07:14.880><c> code</c><00:07:15.120><c> for</c><00:07:15.280><c> different</c>

00:07:15.589 --> 00:07:15.599 align:start position:0%
generate a bunch of code for different
 

00:07:15.599 --> 00:07:16.550 align:start position:0%
generate a bunch of code for different
types

00:07:16.550 --> 00:07:16.560 align:start position:0%
types
 

00:07:16.560 --> 00:07:18.150 align:start position:0%
types
i<00:07:16.720><c> don't</c><00:07:16.880><c> recommend</c><00:07:17.360><c> this</c><00:07:17.520><c> but</c><00:07:17.680><c> if</c><00:07:17.840><c> you</c><00:07:17.919><c> really</c>

00:07:18.150 --> 00:07:18.160 align:start position:0%
i don't recommend this but if you really
 

00:07:18.160 --> 00:07:19.990 align:start position:0%
i don't recommend this but if you really
wanted<00:07:18.400><c> to</c><00:07:18.639><c> you</c><00:07:18.800><c> could</c><00:07:18.960><c> define</c><00:07:19.280><c> the</c><00:07:19.440><c> imaginary</c>

00:07:19.990 --> 00:07:20.000 align:start position:0%
wanted to you could define the imaginary
 

00:07:20.000 --> 00:07:21.670 align:start position:0%
wanted to you could define the imaginary
unit<00:07:20.400><c> as</c><00:07:20.560><c> being</c><00:07:20.720><c> a</c><00:07:20.800><c> lazy</c><00:07:21.199><c> square</c><00:07:21.440><c> root</c><00:07:21.599><c> of</c>

00:07:21.670 --> 00:07:21.680 align:start position:0%
unit as being a lazy square root of
 

00:07:21.680 --> 00:07:22.550 align:start position:0%
unit as being a lazy square root of
negative<00:07:22.000><c> one</c>

00:07:22.550 --> 00:07:22.560 align:start position:0%
negative one
 

00:07:22.560 --> 00:07:24.550 align:start position:0%
negative one
you<00:07:22.800><c> can't</c><00:07:23.039><c> evaluate</c><00:07:23.680><c> that</c><00:07:24.080><c> but</c><00:07:24.240><c> you</c><00:07:24.400><c> can</c>

00:07:24.550 --> 00:07:24.560 align:start position:0%
you can't evaluate that but you can
 

00:07:24.560 --> 00:07:26.150 align:start position:0%
you can't evaluate that but you can
represent<00:07:24.960><c> it</c><00:07:25.039><c> symbolically</c><00:07:25.680><c> now</c><00:07:25.919><c> and</c><00:07:26.000><c> you</c>

00:07:26.150 --> 00:07:26.160 align:start position:0%
represent it symbolically now and you
 

00:07:26.160 --> 00:07:27.749 align:start position:0%
represent it symbolically now and you
can<00:07:26.240><c> use</c><00:07:26.479><c> that</c><00:07:26.639><c> to</c><00:07:26.800><c> represent</c><00:07:27.280><c> complex</c>

00:07:27.749 --> 00:07:27.759 align:start position:0%
can use that to represent complex
 

00:07:27.759 --> 00:07:28.469 align:start position:0%
can use that to represent complex
numbers

00:07:28.469 --> 00:07:28.479 align:start position:0%
numbers
 

00:07:28.479 --> 00:07:30.230 align:start position:0%
numbers
it<00:07:28.639><c> even</c><00:07:28.800><c> has</c><00:07:29.039><c> the</c><00:07:29.120><c> same</c><00:07:29.360><c> memory</c><00:07:29.680><c> layout</c><00:07:30.080><c> as</c>

00:07:30.230 --> 00:07:30.240 align:start position:0%
it even has the same memory layout as
 

00:07:30.240 --> 00:07:32.870 align:start position:0%
it even has the same memory layout as
the<00:07:30.319><c> complex</c><00:07:30.639><c> numbers</c><00:07:30.960><c> built</c><00:07:31.199><c> into</c><00:07:31.360><c> julia</c>

00:07:32.870 --> 00:07:32.880 align:start position:0%
the complex numbers built into julia
 

00:07:32.880 --> 00:07:34.150 align:start position:0%
the complex numbers built into julia
note<00:07:33.120><c> that</c><00:07:33.199><c> all</c><00:07:33.360><c> of</c><00:07:33.440><c> these</c><00:07:33.599><c> expressions</c><00:07:34.080><c> will</c>

00:07:34.150 --> 00:07:34.160 align:start position:0%
note that all of these expressions will
 

00:07:34.160 --> 00:07:35.830 align:start position:0%
note that all of these expressions will
have<00:07:34.319><c> different</c><00:07:34.639><c> types</c><00:07:35.039><c> and</c><00:07:35.280><c> that</c><00:07:35.520><c> can</c><00:07:35.680><c> be</c><00:07:35.759><c> a</c>

00:07:35.830 --> 00:07:35.840 align:start position:0%
have different types and that can be a
 

00:07:35.840 --> 00:07:37.189 align:start position:0%
have different types and that can be a
downside<00:07:36.400><c> though</c><00:07:36.639><c> you</c><00:07:36.720><c> could</c><00:07:36.880><c> try</c><00:07:37.039><c> to</c>

00:07:37.189 --> 00:07:37.199 align:start position:0%
downside though you could try to
 

00:07:37.199 --> 00:07:38.309 align:start position:0%
downside though you could try to
normalize<00:07:37.680><c> it</c>

00:07:38.309 --> 00:07:38.319 align:start position:0%
normalize it
 

00:07:38.319 --> 00:07:40.309 align:start position:0%
normalize it
speaking<00:07:38.720><c> of</c><00:07:38.880><c> downsides</c><00:07:39.599><c> trying</c><00:07:39.919><c> to</c><00:07:40.000><c> do</c><00:07:40.160><c> a</c><00:07:40.160><c> lot</c>

00:07:40.309 --> 00:07:40.319 align:start position:0%
speaking of downsides trying to do a lot
 

00:07:40.319 --> 00:07:41.990 align:start position:0%
speaking of downsides trying to do a lot
of<00:07:40.400><c> code</c><00:07:40.560><c> reviews</c><00:07:40.960><c> like</c><00:07:41.120><c> unifying</c><00:07:41.599><c> literal</c>

00:07:41.990 --> 00:07:42.000 align:start position:0%
of code reviews like unifying literal
 

00:07:42.000 --> 00:07:43.270 align:start position:0%
of code reviews like unifying literal
power<00:07:42.240><c> with</c><00:07:42.400><c> broadcasting</c>

00:07:43.270 --> 00:07:43.280 align:start position:0%
power with broadcasting
 

00:07:43.280 --> 00:07:44.790 align:start position:0%
power with broadcasting
probably<00:07:43.680><c> increases</c><00:07:44.160><c> coupling</c><00:07:44.560><c> and</c><00:07:44.639><c> has</c>

00:07:44.790 --> 00:07:44.800 align:start position:0%
probably increases coupling and has
 

00:07:44.800 --> 00:07:46.390 align:start position:0%
probably increases coupling and has
unintentional<00:07:45.520><c> effects</c>

00:07:46.390 --> 00:07:46.400 align:start position:0%
unintentional effects
 

00:07:46.400 --> 00:07:48.150 align:start position:0%
unintentional effects
the<00:07:46.560><c> types</c><00:07:46.879><c> here</c><00:07:47.199><c> get</c><00:07:47.360><c> pretty</c><00:07:47.520><c> large</c><00:07:47.919><c> and</c><00:07:48.000><c> that</c>

00:07:48.150 --> 00:07:48.160 align:start position:0%
the types here get pretty large and that
 

00:07:48.160 --> 00:07:49.670 align:start position:0%
the types here get pretty large and that
can<00:07:48.319><c> influence</c><00:07:48.720><c> compile</c><00:07:49.120><c> times</c>

00:07:49.670 --> 00:07:49.680 align:start position:0%
can influence compile times
 

00:07:49.680 --> 00:07:51.110 align:start position:0%
can influence compile times
also<00:07:50.000><c> if</c><00:07:50.160><c> you're</c><00:07:50.240><c> not</c><00:07:50.400><c> careful</c><00:07:50.800><c> you</c><00:07:50.960><c> can</c><00:07:51.039><c> get</c>

00:07:51.110 --> 00:07:51.120 align:start position:0%
also if you're not careful you can get
 

00:07:51.120 --> 00:07:53.270 align:start position:0%
also if you're not careful you can get
lots<00:07:51.360><c> of</c><00:07:51.440><c> method</c><00:07:51.759><c> ambiguities</c>

00:07:53.270 --> 00:07:53.280 align:start position:0%
lots of method ambiguities
 

00:07:53.280 --> 00:07:56.000 align:start position:0%
lots of method ambiguities
thanks

